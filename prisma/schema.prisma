generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model AttendanceReport {
  id        Int       @id @default(autoincrement())
  date      DateTime  @default(now())
  teacherId Int       @map("teacher_id")
  teacher   Teacher   @relation(fields: [teacherId], references: [id])
  students  Student[] @relation("attendance_report_to_student")

  @@index([teacherId], map: "attendance_report_teacher_id_fkey")
  @@map("attendance_report")
}

model Classroom {
  id       Int       @id @default(autoincrement())
  name     String
  students Student[]
  teachers Teacher[]

  @@map("classroom")
}

model Complaint {
  id      Int    @id @default(autoincrement())
  message String @default("No message")

  @@map("complaint")
}

model FeatureRequest {
  id      Int    @id @default(autoincrement())
  message String @default("No message")

  @@map("feature_request")
}

model Role {
  id          Int          @id @default(autoincrement())
  name        String
  users       User[]
  permissions Permission[] @relation("role_to_permission")

  @@map("role")
}

model Student {
  id          Int                @id @default(autoincrement())
  userId      Int?               @unique @map("user_id")
  name        String             @default("user")
  nis         String             @default("0XXX")
  points      Int                @default(0)
  classroomId Int?               @map("classroom_id")
  classroom   Classroom?         @relation(fields: [classroomId], references: [id])
  attendances AttendanceReport[] @relation("attendance_report_to_student")
  strikes     StudentStrike[]    @relation("student_to_student_strike")

  @@index([classroomId], map: "student_classroom_id_fkey")
  @@map("student")
}

model StudentStrike {
  id          Int       @id @default(autoincrement())
  reason      String    @default("No reason")
  active      Boolean   @default(true)
  date        DateTime  @default(now())
  teacherId   Int?      @map("teacher_id")
  description String    @default("No description")
  amount      Int       @default(0)
  teacher     Teacher?  @relation(fields: [teacherId], references: [id])
  students    Student[] @relation("student_to_student_strike")

  @@index([teacherId], map: "student_strike_teacher_id_fkey")
  @@map("student_strike")
}

model StudentStrikeType {
  id             Int     @id @default(autoincrement())
  name           String
  amount         Int     @default(0)
  hasDescription Boolean @default(false)
  description    String? @default("No description")

  @@map("student_strike_type")
}

model Teacher {
  id                Int                @id @default(autoincrement())
  userId            Int?               @unique @map("user_id")
  name              String             @default("user")
  classroomId       Int?               @map("classroom_id")
  attendanceReports AttendanceReport[]
  studentStrikes    StudentStrike[]
  classroom         Classroom?         @relation(fields: [classroomId], references: [id])

  @@index([classroomId], map: "teacher_classroom_id_fkey")
  @@map("teacher")
}

model User {
  id         Int     @id @default(autoincrement())
  identifier String  @unique
  password   String
  roleId     Int?    @map("role_id")
  nis        String? @unique
  role       Role?   @relation(fields: [roleId], references: [id])

  @@index([roleId], map: "user_role_id_fkey")
  @@map("user")
}

model Permission {
  id    Int    @id @default(autoincrement())
  name  String
  key   String
  roles Role[] @relation("role_to_permission")

  @@map("permission")
}
