generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model calendar_event {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  date        DateTime
  end_date    DateTime?

  @@index([name], map: "calendar_event_name_key")
  @@index([date], map: "calendar_event_date_key")
}

model class_room {
  id        Int              @id @default(autoincrement())
  name      String
  code      String
  schedules class_schedule[]
}

model Class {
  id        Int              @id @default(autoincrement())
  name      String
  schedules class_schedule[]
  students  student[]

  @@index([name], map: "class_name_key")
  @@map("class")
}

model class_schedule {
  id         Int           @id @default(autoincrement())
  class_id   Int
  day        day           @default(value)
  start_time Float
  end_time   Float
  subject_id Int
  room_id    Int?
  room       class_room?   @relation(fields: [room_id], references: [id])
  class      Class         @relation(fields: [class_id], references: [id])
  subject    class_subject @relation(fields: [subject_id], references: [id])

  @@index([class_id], map: "class_schedule_class_id_fkey")
  @@index([subject_id], map: "class_schedule_subject_id_fkey")
}

model class_subject {
  id        Int              @id @default(autoincrement())
  name      String
  schedules class_schedule[]
  teachers  teacher[]        @relation("teacher_to_subject")

  @@index([name], map: "class_subject_name_key")
}

model faq {
  id       Int    @id @default(autoincrement())
  question String
  answer   String

  @@index([question], map: "faq_question_key")
}

model role {
  id          Int               @id @default(autoincrement())
  name        String
  permissions role_permission[] @relation("role_to_permission")
  users       user[]            @relation("user_to_role")

  @@index([name], map: "role_name_key")
}

model role_permission {
  id    Int    @id @default(autoincrement())
  name  String
  key   String
  roles role[] @relation("role_to_permission")

  @@index([key], map: "role_permission_key_key")
}

model student {
  id                  Int                                     @id @default(autoincrement())
  user_id             Int?                                    @unique
  name                String                                  @default("user")
  nis                 String                                  @unique @default("0XXX")
  points              Int                                     @default(0)
  class_id            Int?
  date_created        DateTime                                @default(now())
  about               String?
  school_email        String?
  class               Class?                                  @relation(fields: [class_id], references: [id])
  attendances         student_attendance[]
  fees                student_fee[]
  strikes             student_point[]                         @relation("student_to_student_strike")
  parent              parent?
  attendance_requests student_attendance_permission_request[]

  @@index([user_id], map: "student_user_id_fkey")
  @@index([class_id], map: "student_class_id_fkey")
  @@index([points], map: "student_points_key")
  @@index([name], map: "student_name_key")
}

model parent {
  id         Int     @id @default(autoincrement())
  user_id    Int?    @unique
  name       String  @default("user")
  student    student @relation(fields: [student_id], references: [id])
  student_id Int     @unique

  @@index([user_id], map: "student_user_id_fkey")
  @@index([name], map: "student_name_key")
  @@index([student_id], map: "student_id_key")
}

model student_attendance {
  id           Int                     @id @default(autoincrement())
  student_id   Int
  date_created DateTime                @default(now())
  type         student_attendance_type @default(present)
  verified     Boolean                 @default(false)
  student      student                 @relation(fields: [student_id], references: [id])

  @@index([student_id], map: "student_attendance_student_id_fkey")
  @@index([type], map: "student_attendance_type_key")
  @@index([verified], map: "student_attendance_verified_key")
  @@index([date_created], map: "student_attendance_date_created_key")
}

model student_attendance_permission_request {
  id           Int                                  @id @default(autoincrement())
  student_id   Int
  description  String                               @default("No description")
  attachment   String?
  type         student_attendance_type              @default(permission)
  status       student_attendance_permission_status @default(queued)
  date_created DateTime                             @default(now())
  student      student                              @relation(fields: [student_id], references: [id])

  @@index([student_id], map: "student_attendance_permission_student_id_fkey")
}

model student_fee {
  id           Int                   @id @default(autoincrement())
  student_id   Int
  name         String
  status       fee_status            @default(unpaid)
  amount       Int                   @default(0)
  date_created DateTime              @default(now())
  due_date     DateTime?             @default(now())
  student      student               @relation(fields: [student_id], references: [id])
  payments     student_fee_payment[]

  @@index([student_id], map: "student_fee_student_id_fkey")
}

model app_feedback {
  id           Int      @id @default(autoincrement())
  description  String
  snapshot     String
  date_created DateTime @default(now())
}

model student_fee_payment {
  id           Int                @id @default(autoincrement())
  fee_id       Int
  amount       Int                @default(0)
  description  String             @default("No description")
  receipt      String
  status       fee_payment_status @default(verifying)
  fee          student_fee        @relation(fields: [fee_id], references: [id])
  date_created DateTime           @default(now())

  @@index([fee_id], map: "student_fee_payment_fee_id_fkey")
}

model student_point {
  id           Int       @id @default(autoincrement())
  reason       String    @default("No reason")
  date         DateTime  @default(now())
  teacher_id   Int?
  amount       Int       @default(0)
  date_created DateTime  @default(now())
  teacher      teacher?  @relation(fields: [teacher_id], references: [id])
  students     student[] @relation("student_to_student_strike")

  @@index([teacher_id], map: "student_strike_teacher_id_fkey")
  @@index([date], map: "student_strike_date_key")
}

model student_point_type {
  id     Int    @id @default(autoincrement())
  name   String
  amount Int    @default(0)

  @@index([name], map: "student_point_type_name_key")
}

model teacher {
  id           Int             @id @default(autoincrement())
  user_id      Int?            @unique
  name         String          @default("user")
  date_created DateTime        @default(now())
  strikes      student_point[]
  subjects     class_subject[] @relation("teacher_to_subject")

  @@index([user_id], map: "teacher_user_id_fkey")
}

model user {
  id           Int       @id @default(autoincrement())
  identifier   String    @unique
  password     String
  type         user_type @default(value)
  email        String?   @unique
  date_created DateTime  @default(now())
  roles        role[]    @relation("user_to_role")
}

enum student_attendance_type {
  present
  permission
  absent
  sick
}

enum student_attendance_permission_status {
  queued
  accepted
  rejected
}

enum user_type {
  value
  student
  teacher
  parent
  admin
}

enum day {
  value
  monday
  tuesday
  wednesday
  thursday
  friday
  saturday
  sunday
}

enum fee_status {
  paid
  unpaid
}

enum fee_payment_status {
  paid
  verifying
  rejected
}
