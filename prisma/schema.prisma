generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int    @id @default(autoincrement())
  identifier String @unique
  password   String
  roleId     Int?
  role       Role?  @relation(fields: [roleId], references: [id])

  @@index([roleId], map: "User_roleId_fkey")
}

model Student {
  id                Int                @id @default(autoincrement())
  userId            Int?               @unique
  name              String             @default("User")
  nis               String             @default("0XXX")
  points            Int                @default(0)
  classroomId       Int?
  classroom         Classroom?         @relation(fields: [classroomId], references: [id])
  attendanceReports AttendanceReport[] @relation("AttendanceReportToStudent")
  strikes           StudentStrike[]    @relation("StudentToStudentStrike")

  @@index([classroomId], map: "Student_classroomId_fkey")
}

model Teacher {
  id                Int                @id @default(autoincrement())
  userId            Int?               @unique
  name              String             @default("User")
  classroomId       Int?
  attendanceReports AttendanceReport[]
  studentStrikes    StudentStrike[]
  classroom         Classroom?         @relation(fields: [classroomId], references: [id])

  @@index([classroomId], map: "Teacher_classroomId_fkey")
}

model Classroom {
  id       Int       @id @default(autoincrement())
  name     String
  students Student[]
  teachers Teacher[]
}

model StudentStrike {
  id          Int                @id @default(autoincrement())
  reason      String             @default("No reason")
  active      Boolean            @default(true)
  date        DateTime           @default(now())
  teacherId   Int?
  description String             @default("No description")
  amount      Int                @default(0)
  typeId      Int?
  teacher     Teacher?           @relation(fields: [teacherId], references: [id])
  type        StudentStrikeType? @relation(fields: [typeId], references: [id])
  students    Student[]          @relation("StudentToStudentStrike")

  @@index([teacherId], map: "StudentStrike_teacherId_fkey")
  @@index([typeId], map: "StudentStrike_typeId_fkey")
}

model StudentStrikeType {
  id             Int             @id @default(autoincrement())
  name           String
  amount         Int             @default(0)
  hasDescription Boolean         @default(false)
  description    String?         @default("No description")
  studentStrikes StudentStrike[]
}

model AttendanceReport {
  id        Int       @id @default(autoincrement())
  date      DateTime  @default(now())
  teacherId Int
  teacher   Teacher   @relation(fields: [teacherId], references: [id])
  students  Student[] @relation("AttendanceReportToStudent")

  @@index([teacherId], map: "AttendanceReport_teacherId_fkey")
}

model Role {
  id   Int    @id @default(autoincrement())
  name String
  User User[]
}

model Complaint {
  id      Int    @id @default(autoincrement())
  message String @default("No message")
}

model FeatureRequest {
  id      Int    @id @default(autoincrement())
  message String @default("No message")
}
